# -*- coding: utf-8 -*-
"""Fake_news_classifiers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/manan-arya/Fake_News_US/blob/master/Fake_news_classifiers.ipynb
"""

!wget https://raw.githubusercontent.com/manan-arya/Fake_News_US/master/kaggle_dataset/train.csv?token=AcjiTfZQHIFYhQ_qKtVo0y6rG3mD71Lcks5bl-ZPwA%3D%3D
!wget https://raw.githubusercontent.com/manan-arya/Fake_News_US/master/kaggle_dataset/test.csv?token=AcjiTZknxG_W1-9YmnE6V9HSgBkxaIJgks5bl-aEwA%3D%3D

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# %matplotlib inline

train_data=pd.read_csv('train.csv?token=AcjiTfZQHIFYhQ_qKtVo0y6rG3mD71Lcks5bl-ZPwA%3D%3D')
train_data.head()

test_data= pd.read_csv('test.csv?token=AcjiTZknxG_W1-9YmnE6V9HSgBkxaIJgks5bl-aEwA%3D%3D')
test_data.head()

train_data = train_data.drop('id', axis = 1)
train_data.dropna(axis = 0, inplace = True)

X = train_data['text']
y = train_data['label']

from sklearn.feature_extraction.text import CountVectorizer

vectorizer=CountVectorizer()
vectorizer.fit(X)

transformed=vectorizer.transform(X)
transformed

vectorizer.vocabulary_

from sklearn.model_selection import train_test_split
from sklearn import svm
from matplotlib.colors import ListedColormap

X_train, X_test, y_train, y_test = train_test_split(transformed,y, test_size = 0.2, random_state = 15)

clf_svm = svm.LinearSVC(random_state=42)

clf_svm.fit(X_train,y_train)
preds = clf_svm.predict(X_test)
clf_svm.score(X_test, y_test)

from xgboost.sklearn import XGBClassifier
from sklearn.metrics import mean_squared_error

xgb = XGBClassifier()

xgb.fit(X_train,y_train)
preds_xgb = xgb.predict(X_test)

accuracy = float(np.sum(preds_xgb==y_test))/y_test.shape[0]
print("accuracy:  ", (accuracy))

from sklearn.ensemble import (RandomForestClassifier,ExtraTreesClassifier,AdaBoostClassifier)

clf_rf=RandomForestClassifier()

clf_rf.fit(X_train,y_train)

preds_rf=clf_rf.predict(X_test)

clf_rf.score(X_test,y_test)

clf_xt=ExtraTreesClassifier()

clf_xt.fit(X_train,y_train)

preds_xt=clf_xt.predict(X_test)

clf_xt.score(X_test,y_test)

clf_ada=AdaBoostClassifier()

clf_ada.fit(X_train,y_train)

preds_ada=clf_ada.predict(X_test)

clf_ada.score(X_test,y_test)

from sklearn.linear_model import LogisticRegression

clf_lr=LogisticRegression()

clf_lr.fit(X_train,y_train)

preds_lr=clf_lr.predict(X_test)

clf_lr.score(X_test,y_test)

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()
transformed_tfidf = tfidf.fit_transform(X)
transformed_tfidf

X_train, X_test, y_train, y_test = train_test_split(transformed_tfidf,y, test_size=0.2, random_state=24)

from sklearn.svm import SVC


clf= SVC(kernel="linear")
clf.fit(X_train, y_train)
preds = clf.predict(X_test)


(preds == y_test).sum()/len(y_test)

from sklearn.model_selection import cross_val_score

cross_val_score(clf,transformed_tfidf, y, cv=5).mean()

from sklearn.model_selection import cross_val_score

cross_val_score(clf_lr,X_train, y_train, cv=5).mean()